// <auto-generated />
using System;
using CurrencyExchange.DAL.EntityFramework.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CurrencyExchange.DAL.EntityFramework.SqlServer.Migrations
{
    [DbContext(typeof(SqlServerDbContext))]
    [Migration("20200412184148_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CurrencyExchange.DAL.EntityFramework.Entities.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c484f6bc-468e-4a0b-817c-ff477bd23163"),
                            Code = "RUB",
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("ef74e200-991d-4650-ab29-89372936184b"),
                            Code = "KRW",
                            Rate = 0m
                        });
                });

            modelBuilder.Entity("CurrencyExchange.DAL.EntityFramework.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e5656688-c359-4ed9-86a7-fe78d967c616"),
                            Name = "User A"
                        },
                        new
                        {
                            Id = new Guid("8d21a257-6623-45ee-aa20-3e02865bfb20"),
                            Name = "User B"
                        });
                });

            modelBuilder.Entity("CurrencyExchange.DAL.EntityFramework.Entities.UserWallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("UserWallets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9f89b9da-acc3-4a88-9960-214b37a574fe"),
                            Balance = 0m,
                            CurrencyId = new Guid("c484f6bc-468e-4a0b-817c-ff477bd23163"),
                            UserId = new Guid("e5656688-c359-4ed9-86a7-fe78d967c616")
                        },
                        new
                        {
                            Id = new Guid("ab0e3d97-dcda-494a-b79e-802f6363d552"),
                            Balance = 0m,
                            CurrencyId = new Guid("ef74e200-991d-4650-ab29-89372936184b"),
                            UserId = new Guid("8d21a257-6623-45ee-aa20-3e02865bfb20")
                        });
                });

            modelBuilder.Entity("CurrencyExchange.DAL.EntityFramework.Entities.UserWallet", b =>
                {
                    b.HasOne("CurrencyExchange.DAL.EntityFramework.Entities.Currency", "Currency")
                        .WithMany("UserWallets")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CurrencyExchange.DAL.EntityFramework.Entities.User", "User")
                        .WithMany("UserWallets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
